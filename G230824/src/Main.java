import javax.rmi.ssl.SslRMIClientSocketFactory;
import java.util.Scanner; // 입력장치 사용을 원할 경우 가장 위에 입력할 것.
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {


        // 동적 메모리가 할당 됐다면, 런타임(프로그램 작동 중) 중에 메모리가 할당됐다라는 뜻.
        // 전역 변수, 스태틱 변수, ... 는 정적 메모리 : 프로그램 실행 전 (런타임 이전) 메모리 할당


        // continue, break의 기능
        /*
        continue, break : 반복문 전체에 사용 가능
            continue : 반복문의 처음으로 돌아가서 다시 시작
            break : 반복문을 종료
        */


        // 난수 N이 45보다 크면 while문의 처음으로 돌아가서 반복, 난수 N이 45보다 작으면 인수 i가 1씩 증가된다.
        /*
        int i = 0;

        while (i < 10) {
            int 난수 = N;

            if (45 < 난수)
                continue;

            i++;

            if (true)
                break;
        }
        */


        // do - while : 일단 do 뒤의 내용을 한 번 실행하고, while의 반복 조건이 true라면 do의 내용을 반복 실행한다.
        /*
        int i = 0;

        do {
            // i++; 증감식을 넣어야한다면 이곳에 쓴다.
            System.out.println("HelloWorld");
        } while (i < 10);
        */


        // 문자열 출력 (자바 서식 문자 참조 : https://the-duchi.tistory.com/12)
        /*
        // 문자들을 배열 형태로 만들어 문자열처럼 출력 (char = '문자' 하나를 지정 / 데이터 타입의 개념)
        // %c = 문자를 나타내는 서식 문자
        // \n = 줄 바꿈 서식 문자
        char c = 'A';
        char d = 'B';
        char e = 'C';
        char f = 'D';

        System.out.printf("%c%c%c%c\n", c, d, e, f);


        // 문자열을 출력 (String = "문자열"을 지정 / 클래스의 개념)
        // %s = 문자열을 나타내는 서식 문자
        String name = "홍길동";

        System.out.printf("%s\n", name);


        // length() : 문자열의 길이를 정수로 반환하는 함수
        int i = name.length();

        System.out.println(i);
        */


        // 배열
        /*
        int[] num1 = {10, 20, 30, 40};

        for (int i = 0 ; i < 4 ; ++ i) {
            System.out.println( num1[i]);
        }
        */


        // 배열 선언 및 초기화
        /*
        // new가 사용됐다면, 무조건 동적 메모리에 할당된다.

        int[] num2;
        num2 = new int[]{10, 20, 30, 40};

        int[] num3 = new int[4]; // 크기가 4인 배열
        num3[0] = 10;
        num3[1] = 20;
        num3[2] = 30;
        num3[3] = 40;

        int length = num3.length;
        System.out.printf("%d\n", length);
        */


        // 배열 예제
        /*
        char[] numbers = {'A', 'B', 'C', 'D', 'E', };

        for (int i = 0 ; i < numbers.length ; ++i)
        {
            System.out.println(numbers[i]);
        }

        System.out.println(numbers[numbers.length-1]);

        System.out.println(new String(numbers));

        int length = numbers.length;
        System.out.printf("%d\n", length);
        */


        // Sacnner 활용 (테스트용으로 사용할 수 있는 것이라, 외우려고 애쓰지 않아도 됌.)
        /*
        // Scanner 객체 생성
        Scanner scanner = new Scanner(System.in);

        // 사용자에게 입력 안내 메시지 출력
        System.out.print("이름을 입력해주세요: ");

        // 사용자로부터 한 줄을 입력받아 name 변수에 저장
        String name = scanner.nextLine();

        // 입력받은 이름 출력
        System.out.println("입력하신 이름은 " + name + "입니다.");

        // Scanner 객체 닫기
        scanner.close();
        */


        // 홍길동 임꺽정 이몽룡 이라는 이름을 받아서 출력
        /*
        // 입력한 데이터가 존재할 임시의 공간
        Scanner scanner = new Scanner(System.in);

        // userNames이라는 문자열 배열 = 3칸짜리 임시 저장소 배열
        String[] userNames = new String[3]; // [] 안의 숫자는 변경 가능(저장을 원하는 만큼)

        for(int i = 0; i < userNames.length; ++i) // userNames.length = userNames의 길이 <- new String["3"] : 3자리 길이로 위에 작성함
        {
            System.out.print("이름을 입력해 주세요: ");
            userNames[i] = scanner.nextLine(); // userNames[]라는 문자열 배열의 i번째에 입력한 글자를 저장 / for문의 증감식으로 인해 입력을 할 때마다 다음 칸에 저장
        }

        for(int i = 0; i < userNames.length; ++i)
        {
           System.out.println("입력하신 이름은 " + userNames[i] + "입니다."); // userNames[]라는 문자열 배열의 i번째에 입력된 글자를 출력 / for문의 증감식으로 인해 출력 할 때마다 다음 칸 출력
        }
        */


        // *** 다차원 배열 ***
        /*
        long[][][][][][][][][][][][][][][][][][][][] l = new long[2][2][2][2][2][2][2][2][2][2][2][2][2][2][2][2][2][2][2][2];
        // [] 하나당 1개의 차원으로 판단.
        // ex) []가 4개라면 4차원 배열
        // 모든 차원의 배열은 메모리 공간에서 한 줄로 길게 이어짐
        // ex) --1차원 배열-- --2차원 배열-- --3차원 배열-- --4차원 배열-- ...
        // 차원이 하나 늘어날 때마다 []안의 숫자만큼 배로 증가한다. (뒤에서부터 계산)
        // ex) [2][5][4][3] -> 3 * 4 * 5 * 2
        */


        // 다차원 배열 개념 확인
        /*
        long[][][] l = new long[][][] {
                {
                        {1, 2},
                        {3, 4}
                },
                {
                        {5, 6},
                        {7, 8}
                }
        };

        // 총 3개의 학년, 학년 당 5개의 반, 한 반 당 30명
        int[][][] i = new int[][][] {
                {
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}

                },
                {
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}
                },
                {
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30},
                        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}
                }
        };
        // = int[][][] j = new int[3][5][30];
        */


        // 다차원 배열 초기화
        /*
        // 2차원 배열 초기화
        int[][] i = new int[2][2];

        i[0][0] = 1;
        i[0][1] = 2;
        i[1][0] = 3;
        i[1][1] = 4;

        // 3차원 배열 초기화
        int[][][] j = new int[2][2][2];

        j[0][0][0] = 1;
        j[0][0][1] = 2;
        j[0][1][0] = 3;
        j[0][1][1] = 4;
        j[1][0][0] = 5;
        j[1][0][1] = 6;
        j[1][1][0] = 7;
        j[1][1][1] = 8;
        */

        // N차원 배열 출력 예제

        final int x = 2;
        final int y = 2;
        final int z = 2;

        int[][][] array = new int[z][y][x];

        int n = 0;

        for (int i = 0 ; i < z ; i++) {
            for (int j = 0 ; j < y ; j++) {
                for (int k = 0 ; k < x ; k++) {
                    array[i][j][k] = ++n;
                }
            }
        }

        for (int i = 0 ; i < z ; i++) {
            for (int j = 0 ; j < y ; j++) {
                for (int k = 0 ; k < x ; k++) {
                    System.out.println(array[i][j][k] = ++n);
                }
            }
        }





    }
}
